<?php

/**
 * The Geocode API call.
 * @example:
 *    geocoder('google','4925 Gair Ave, Terrace, BC');
 *    geocoder('google','New York City','polygon');
 */
function geocoder() {
  ctools_include('plugins');

  $args = func_get_args();
  $processor_name = array_shift($args);
  $processor = ctools_get_plugins('geocoder', 'geocoder_handler', $processor_name);
  $geometry = call_user_func_array($processor['callback'],$args);

  return $geometry;
}


/**
 * Implements hook_menu().
 */
function  geocoder_menu() {
  // Admin settings for the site.
  $items['admin/config/content/geocoder'] = array(
    'title' => 'Geocoder settings',
    'description' => 'Configuration for API keys.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('geocoder_admin_settings'),
    'file' => 'geocoder.admin.inc',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM, // optional
  );
  return $items;
}


/**
 * Return a list of all handlers that might geocoder something for you.
 */
function geocoder_handler_info($field_type = NULL) {
  ctools_include('plugins');

  static $handlers;
  if (!$handlers) {
    $handlers = ctools_get_plugins('geocoder', 'geocoder_handler');
  }
  if ($field_type) {
    $field_handlers = $handlers;
    foreach($field_handlers as $i => $handler) {
      if (!isset($handler['field_types']) || !in_array($field_type, $handler['field_types'])) {
        unset($field_handlers[$i]);
      }
    }
    return $field_handlers;
  }
  return $handlers;
}

/**
 * Fetch a geocoder handler
 */
function geocoder_get_handler($handler_name) {
  $handlers = geocoder_handler_info();
  return $handlers[$handler_name];
}

/**
 * Get a list of supported field types along with the processors that support them
 */
function geocoder_supported_field_types() {
  $supported = array();

  $processors = geocoder_handler_info();

  foreach ($processors as $processor) {
    if (isset($processor['field_types'])) {
      foreach ($processor['field_types'] as $field_type) {
        $supported[$field_type][] = $processor['name'];
      }
    }
  }

	return $supported;
}

/**
 * geoPHP loader
 */
function geocoder_load_geophp() {
  static $static_cache = FALSE;

  if (!$static_cache) {
    $path = libraries_get_path('geoPHP');
    $file = $path.'/geoPHP.inc';
    if (file_exists($file)) {
      if (include_once($file)) {
        $static_cache = $file;
      }
    }
  }

  return $static_cache;
}


/**
 * Implementation of hook_ctools_plugin_api().
 */
function geocoder_ctools_plugin_api() {
  return array('version' => 1);
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system know
 * we implement plugins.
 */
function geocoder_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implements hook_ctools_plugin_type
 */
function geocoder_ctools_plugin_type() {
  return array(
    'geocoder_handler' => array(),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function geocoder_field_widget_info() {
  return array(
    'geocoder' => array(
      'label' => t('Geocode from another field'),
      'field types' => array('geofield'),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements field_widget_settings_form().
 */
function geocoder_field_widget_settings_form($this_field, $instance) {
  $settings = $instance['widget']['settings'];

  $entity_fields = field_info_instances($instance['entity_type'], $instance['bundle']);
  $all_fields = field_info_fields();
  $supported_field_types = geocoder_supported_field_types();
  $processors = geocoder_handler_info();
  $handlers_by_type = array();
  $field_types = array();
  $valid_fields = array();
  $available_handlers = array();

  // Add in the title/name
  //@@TODO Do this programatically by getting entity_info
  switch ($instance['entity_type']) {
    case 'node':
      $all_fields['title'] = array(
        'field_name' => 'title',
        'type' => 'text',
      );

      $entity_fields['title']['label'] = t('Title');
      break;

    case 'taxonomy_term':
      $all_fields['name'] = array(
        'field_name' => 'name',
        'type' => 'text',
      );

      $entity_fields['name']['label'] = t('Name');
      break;
  }

  // Get a list of all valid fields that we both support and are part of this entity
  foreach ($all_fields as $field) {
    if (array_key_exists($field['field_name'], $entity_fields)) {
      if (in_array($field['type'], array_keys($supported_field_types)) && ($field['field_name'] != $this_field['field_name'])) {
        $valid_fields[$field['field_name']] = $entity_fields[$field['field_name']]['label'];
        foreach ($supported_field_types[$field['type']] as $handler) {
          $available_handlers[$handler] = $processors[$handler]['title'];
          $handlers_by_type[$field['type']][] = $handler;
          $field_types[$field['field_name']] = $field['type'];
        }
      }
    }
  }

  $form['geocoder_field'] = array(
    '#type' => 'select',
    '#title' => t('Geocode from field'),
    '#default_value' => isset($settings['geocoder_field']) ? $settings['geocoder_field']: '',
    '#options' => $valid_fields,
    '#description' => t('Select which field you would like to geocode from.'),
    '#required' => TRUE,
    '#attributes' => array('onchange' => 'geocoder_admin_handler_filter();'),
  );

  $form['geocoder_handler'] = array(
    '#type' => 'select',
    '#title' => t('Geocoder'),
    '#prefix' => '<div id="geocoder-handler-div">',
    '#suffix' => '</div>',
    '#default_value' => isset($settings['geocoder_handler']) ? $settings['geocoder_handler']: '',
    '#options' => $available_handlers,
    '#description' => t('Select which type of geocoding handler you would like to use'),
    '#required' => TRUE,
  );

  $form['delta_handling'] = array(
    '#type' => 'select',
    '#title' => t('Multi-value input handling'),
    '#description' => t('Should geometries from multiple inputs be: <ul><li>Matched with each input (e.g. One POINT for each address field)</li><li>Aggregated into a single MULTIPOINT geofield (e.g. One MULTIPOINT polygon from multiple address fields)</li><li>Broken up into multiple geometries (e.g. One MULTIPOINT to multiple POINTs.)</li></ul>'),
    '#default_value' => isset($settings['delta_handling']) ? $settings['delta_handling']: 'default',
    '#options' => array(
      'default' => 'Match Multiples (default)',
      'm_to_s' =>  'Multiple to Single',
      's_to_m' =>  'Single to Multiple',
    ),
    '#required' => TRUE,
  );

  drupal_add_js(array('geocoder_widget_settings' => array('handlers' => $handlers_by_type, 'types' => $field_types)),'setting');
  drupal_add_js(drupal_get_path('module','geocoder').'/geocoder.admin.js','file');

  return $form;
}

function geocoder_field_widget_settings_form_callback($form, $form_state) {
  return $form['geocoder_handler'];
}

/**
 * Implements hook_field_attach_presave().
 *
 * Geocoding for the geocoder widget is done here to ensure that only validated
 * and fully processed fields values are accessed.
 */
function geocoder_field_attach_presave($entity_type, $entity) {
  // Loop over any geofield using our geocode widget
  $entity_info = entity_get_info($entity_type);
  $bundle_name = empty($entity_info['entity keys']['bundle']) ? $entity_type : $entity->{$entity_info['entity keys']['bundle']};
  foreach (field_info_instances($entity_type, $bundle_name) as $field_instance) {
    if ($field_instance['widget']['type'] === 'geocoder') {
      // Required settings
      if (isset($field_instance['widget']['settings']['geocoder_handler']) && isset($field_instance['widget']['settings']['geocoder_field'])) {
        $handler = geocoder_get_handler($field_instance['widget']['settings']['geocoder_handler']);
        $field_name = is_array($field_instance['widget']['settings']['geocoder_field']) ? reset($field_instance['widget']['settings']['geocoder_field']) : $field_instance['widget']['settings']['geocoder_field'];
        
        // Get values for the data to be geocoded.
        // First check to see if it's an entity field
        if (in_array($field_name, $entity_info['entity keys'])) {
          $items[]['value'] = $entity->$field_name;
          $field_info = array(
            'type' => 'text',
            'entity key' => TRUE,
          );
        }
        else {
          // It's a normal field-api field
          $field_info = field_info_field($field_name);
          $langcode = field_language($entity_type, $entity, $field_name);
          $items = field_get_items($entity_type, $entity, $field_name, $langcode);
        }
        
        if (count($items)) {
          $values = array();
          
          // Geocode geometries
          $geometries = array();
          foreach ($items as $delta => $item) {
            // Geocode any value from our source field.
            try {
              $geometry = call_user_func($handler['field_callback'], $field_info, $item);
              if ($geometry instanceof Geometry) $geometries[] = $geometry;
            }
            catch (Exception $e) {
              drupal_set_message($e->getMessage(), 'error');
            }
          }
          
          if (empty($geometries)) $values = array(NULL);
          else {
            // Determine how we deal with deltas (multi-value fields)
            $delta_handling = $field_instance['widget']['settings']['delta_handling'];
            if (!$delta_handling) $delta_handling = 'default';
            
            // Default delta handling: just pass one delta to the next
            if ($delta_handling == 'default') {
              foreach ($geometries as $geometry) {
                $values[] = geofield_get_values_from_geometry($geometry);
              }
            }
            
            // Single-to-multiple handling - if we can, explode out the component geometries
            if ($delta_handling == 's_to_m') {
              $type = $geometries[0]->geometryType();
              if (in_array($type, array('MultiPoint','MultiLineString','MultiPolygon','GeometryCollection'))) {
                $components = $geometries[0]->getComponents();
                foreach ($components as $component) {
                  $values[] = geofield_get_values_from_geometry($component);
                }
              }
              else {
                $values[] = geofield_get_values_from_geometry($geometries[0]);
              }
            }
            
            // For multiple-to-single handling, run it though geometryReduce
             if ($delta_handling == 'm_to_s') {
              $reduced_geom = geoPHP::geometryReduce($geometries);
              $values[] = geofield_get_values_from_geometry($reduced_geom);
            }
          }
          
          // Set the values - geofields do not support languages
          $entity->{$field_instance['field_name']}[LANGUAGE_NONE] = $values;
        }
      }
    }
  }
}

/**
 * Helper Function: Parse and address field
 */
function geocoder_widget_parse_addressfield($field_item) {
  $address = '';
  if (!empty($field_item['premise']))                 $address .= $field_item['premise'].',';
  if (!empty($field_item['thoroughfare']))            $address .= $field_item['thoroughfare'].',';
  if (!empty($field_item['locality']))                $address .= $field_item['locality'].',';
  if (!empty($field_item['administrative_area']))     $address .= $field_item['administrative_area'].',';
  if (!empty($field_item['sub_administrative_area'])) $address .= $field_item['sub_administrative_area'].',';
  if (!empty($field_item['country']))                 $address .= $field_item['country'].',';
  if (!empty($field_item['postal_code']))             $address .= $field_item['postal_code'].',';
  
  $address = rtrim($address,', ');
  
  return $address;
}
